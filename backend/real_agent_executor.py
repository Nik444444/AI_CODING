"""
Real Agent Executor - –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤
–ö–∞–∂–¥—ã–π –∞–≥–µ–Ω—Ç –ø–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
"""

import json
import asyncio
from typing import Dict, List, Any, Optional
from datetime import datetime
from models import AgentType
from agent_tools import AgentToolsManager

class RealAgentExecutor:
    """–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.tools_manager = None
    
    async def execute_agent_task(self, agent_type: AgentType, message: str, 
                               session_id: str, context: Dict[str, Any] = None) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É –∞–≥–µ–Ω—Ç–∞"""
        
        async with AgentToolsManager() as tools:
            self.tools_manager = tools
            
            if context is None:
                context = {}
            
            # –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
            agent_state = await tools.load_agent_state(agent_type.value, session_id)
            if agent_state["success"]:
                context.update(agent_state["state"])
            
            # –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–∞
            if agent_type == AgentType.PROJECT_PLANNER:
                return await self._execute_project_planner(message, session_id, context)
            elif agent_type == AgentType.DESIGN_AGENT:
                return await self._execute_design_agent(message, session_id, context)
            elif agent_type == AgentType.FRONTEND_DEVELOPER:
                return await self._execute_frontend_developer(message, session_id, context)
            elif agent_type == AgentType.BACKEND_DEVELOPER:
                return await self._execute_backend_developer(message, session_id, context)
            elif agent_type == AgentType.FULLSTACK_DEVELOPER:
                return await self._execute_fullstack_developer(message, session_id, context)
            elif agent_type == AgentType.INTEGRATION_AGENT:
                return await self._execute_integration_agent(message, session_id, context)
            elif agent_type == AgentType.TESTING_EXPERT:
                return await self._execute_testing_expert(message, session_id, context)
            elif agent_type == AgentType.DEPLOYMENT_ENGINEER:
                return await self._execute_deployment_engineer(message, session_id, context)
            elif agent_type == AgentType.VERSION_CONTROL_AGENT:
                return await self._execute_version_control_agent(message, session_id, context)
            else:
                return await self._execute_main_assistant(message, session_id, context)
    
    async def _execute_project_planner(self, message: str, session_id: str, context: Dict[str, Any]) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á Project Planner - —Ä–µ–∞–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"""
        
        response_parts = []
        created_files = []
        next_agent = None
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
        if any(word in message.lower() for word in ["–ø–ª–∞–Ω", "–ø—Ä–æ–µ–∫—Ç", "—Å–æ–∑–¥–∞—Ç—å", "—Å–æ–∑–¥–∞–π", "–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞", "—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "–≤–µ–±", "—Å–∞–π—Ç"]):
            
            # –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
            project_name = f"project_{session_id}"
            project_path = f"projects/{project_name}"
            
            await self.tools_manager.execute_bash(f"mkdir -p {project_path}")
            
            # –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –∑–∞–¥–∞–Ω–∏–µ–º
            tech_spec = f"""# –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ - {project_name}

## –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
{message}

## –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
- –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
- –°–µ—Å—Å–∏—è: {session_id}

## –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
- **Frontend**: React —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ö—É–∫–∞–º–∏
- **Backend**: FastAPI —Å Python
- **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö**: MongoDB –¥–ª—è –≥–∏–±–∫–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
- **–°—Ç–∏–ª–∏**: Tailwind CSS –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

## –≠—Ç–∞–ø—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
1. **–§–∞–∑–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è** (–¢–µ–∫—É—â–∞—è)
2. **–§–∞–∑–∞ –¥–∏–∑–∞–π–Ω–∞** - —Å–æ–∑–¥–∞–Ω–∏–µ UI/UX –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
3. **–§–∞–∑–∞ backend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏** - API –∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
4. **–§–∞–∑–∞ frontend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏** - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
5. **–§–∞–∑–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏** - —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
6. **–§–∞–∑–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è** - –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
7. **–§–∞–∑–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è** - –ø—Ä–æ–¥–∞–∫—à–Ω –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å

## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º
- React 18+ —Å TypeScript
- FastAPI —Å async/await
- MongoDB —Å ODM
- Docker –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏
- Tailwind –¥–ª—è —Å—Ç–∏–ª–µ–π

## –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∏–∑–∞–π–Ω-–∞–≥–µ–Ω—Ç—É
–°–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø: —Å–æ–∑–¥–∞–Ω–∏–µ UI/UX –¥–∏–∑–∞–π–Ω–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""
            
            spec_result = await self.tools_manager.create_file(f"{project_path}/tech_spec.md", tech_spec)
            if spec_result["success"]:
                created_files.append(f"{project_path}/tech_spec.md")
            
            # –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
            project_structure = {
                f"{project_path}/frontend/src/components/": "",
                f"{project_path}/frontend/src/pages/": "",
                f"{project_path}/frontend/src/services/": "",
                f"{project_path}/backend/app/": "",
                f"{project_path}/backend/models/": "",
                f"{project_path}/backend/api/": "",
                f"{project_path}/database/": "",
                f"{project_path}/tests/": "",
                f"{project_path}/docs/": ""
            }
            
            for directory in project_structure.keys():
                await self.tools_manager.execute_bash(f"mkdir -p {directory}")
            
            # –°–æ–∑–¥–∞—Ç—å README –ø—Ä–æ–µ–∫—Ç–∞
            readme_content = f"""# {project_name}

–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω AI-–∞–≥–µ–Ω—Ç–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.

## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
```
{project_name}/
‚îú‚îÄ‚îÄ frontend/          # React frontend
‚îú‚îÄ‚îÄ backend/           # FastAPI backend  
‚îú‚îÄ‚îÄ database/          # Database schemas
‚îú‚îÄ‚îÄ tests/            # Test files
‚îú‚îÄ‚îÄ docs/             # Documentation
‚îî‚îÄ‚îÄ tech_spec.md      # Technical specification
```

## –°—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- ‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
- ‚è≥ –î–∏–∑–∞–π–Ω - –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
- ‚è≥ Backend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ - –æ–∂–∏–¥–∞–Ω–∏–µ
- ‚è≥ Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ - –æ–∂–∏–¥–∞–Ω–∏–µ

## –ö–æ–º–∞–Ω–¥–∞ –∞–≥–µ–Ω—Ç–æ–≤
- Project Planner: –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
- Design Agent: UI/UX –¥–∏–∑–∞–π–Ω
- Backend Developer: —Å–µ—Ä–≤–µ—Ä–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
- Frontend Developer: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
- Integration Agent: –≤–Ω–µ—à–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
- Testing Expert: —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ QA
- Deployment Engineer: —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
"""
            
            readme_result = await self.tools_manager.create_file(f"{project_path}/README.md", readme_content)
            if readme_result["success"]:
                created_files.append(f"{project_path}/README.md")
            
            response_parts.append(f"‚úÖ **–ü—Ä–æ–µ–∫—Ç —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞!**")
            response_parts.append(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: `{project_path}`")
            response_parts.append(f"üìã –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: `{project_path}/tech_spec.md`")
            response_parts.append(f"üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: `{project_path}/README.md`")
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞—Ç—å –¥–∏–∑–∞–π–Ω-–∞–≥–µ–Ω—Ç—É
            new_context = {
                "project_path": project_path,
                "project_name": project_name,
                "phase": "design",
                "created_files": created_files
            }
            
            await self.tools_manager.save_agent_state("project_planner", session_id, new_context)
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á—É –¥–∏–∑–∞–π–Ω-–∞–≥–µ–Ω—Ç—É
            next_agent = "design_agent"
            handoff_context = {
                "project_path": project_path,
                "requirements": message,
                "tech_spec_file": f"{project_path}/tech_spec.md"
            }
            
            await self.tools_manager.handoff_to_agent(
                "project_planner", 
                "design_agent", 
                session_id,
                handoff_context,
                "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–µ—Ä–µ–¥–∞—é –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è UI/UX –¥–∏–∑–∞–π–Ω–∞."
            )
            
            response_parts.append("\nüé® **–ü–µ—Ä–µ–¥–∞—é –ø—Ä–æ–µ–∫—Ç –¥–∏–∑–∞–π–Ω-–∞–≥–µ–Ω—Ç—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è UI/UX –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏...**")
        
        return {
            "success": True,
            "response": "\n\n".join(response_parts),
            "created_files": created_files,
            "next_agent": next_agent,
            "agent_type": "project_planner"
        }
    
    async def _execute_design_agent(self, message: str, session_id: str, context: Dict[str, Any]) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á Design Agent - —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞"""
        
        response_parts = []
        created_files = []
        next_agent = None
        
        # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
        project_path = context.get("project_path", f"projects/project_{session_id}")
        
        # –°–æ–∑–¥–∞—Ç—å –¥–∏–∑–∞–π–Ω-–∫–æ–Ω—Ü–µ–ø—Ü–∏—é
        if any(word in message.lower() for word in ["–¥–∏–∑–∞–π–Ω", "ui", "ux", "–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", "–º–∞–∫–µ—Ç"]):
            
            # –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å –¥–∏–∑–∞–π–Ω-–∫–æ–Ω—Ü–µ–ø—Ü–∏–µ–π
            design_concept = f"""# –î–∏–∑–∞–π–Ω-–∫–æ–Ω—Ü–µ–ø—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞

## UI/UX –°—Ç—Ä–∞—Ç–µ–≥–∏—è
- **–î–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º–∞**: Modern minimalist
- **–¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞**: Dark theme —Å –∞–∫—Ü–µ–Ω—Ç–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
- **–¢–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞**: Inter/System fonts
- **–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã**: –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞
- **–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å**: Mobile-first –ø–æ–¥—Ö–æ–¥

## –ú–∞–∫–µ—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü

### –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
- –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
- Hero —Å–µ–∫—Ü–∏—è —Å CTA
- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
- –§—É—Ç–µ—Ä

### –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
- Button: primary, secondary, ghost
- Input: —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
- Card: –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
- Modal: –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
- Navigation: –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è

## –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞
```css
:root {{
  --primary: #3b82f6;
  --secondary: #64748b;
  --success: #10b981;
  --warning: #f59e0b;
  --error: #ef4444;
  --background: #0f172a;
  --surface: #1e293b;
  --text: #f8fafc;
}}
```

## –ü–µ—Ä–µ–¥–∞—á–∞ frontend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É
–ì–æ—Ç–æ–≤—ã–µ –º–∞–∫–µ—Ç—ã –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ React
"""
            
            design_file = f"{project_path}/design_concept.md"
            design_result = await self.tools_manager.create_file(design_file, design_concept)
            if design_result["success"]:
                created_files.append(design_file)
            
            # –°–æ–∑–¥–∞—Ç—å CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            css_variables = """/* Design System Variables */
:root {
  /* Colors */
  --primary: #3b82f6;
  --primary-dark: #2563eb;
  --secondary: #64748b;
  --success: #10b981;
  --warning: #f59e0b;
  --error: #ef4444;
  
  /* Background */
  --bg-primary: #0f172a;
  --bg-secondary: #1e293b;
  --bg-tertiary: #334155;
  
  /* Text */
  --text-primary: #f8fafc;
  --text-secondary: #cbd5e1;
  --text-muted: #94a3b8;
  
  /* Spacing */
  --space-xs: 0.25rem;
  --space-sm: 0.5rem;
  --space-md: 1rem;
  --space-lg: 1.5rem;
  --space-xl: 2rem;
  
  /* Borders */
  --border-radius: 0.5rem;
  --border-color: #334155;
}

/* Base styles */
* {
  box-sizing: border-box;
}

body {
  background-color: var(--bg-primary);
  color: var(--text-primary);
  font-family: 'Inter', system-ui, sans-serif;
  line-height: 1.6;
}

/* Component styles */
.btn {
  padding: var(--space-sm) var(--space-md);
  border-radius: var(--border-radius);
  border: none;
  cursor: pointer;
  font-weight: 500;
  transition: all 0.2s;
}

.btn-primary {
  background-color: var(--primary);
  color: white;
}

.btn-primary:hover {
  background-color: var(--primary-dark);
}

.card {
  background-color: var(--bg-secondary);
  border: 1px solid var(--border-color);
  border-radius: var(--border-radius);
  padding: var(--space-lg);
}

.input {
  padding: var(--space-sm) var(--space-md);
  border: 1px solid var(--border-color);
  border-radius: var(--border-radius);
  background-color: var(--bg-tertiary);
  color: var(--text-primary);
}
"""
            
            css_file = f"{project_path}/frontend/src/styles/design-system.css"
            await self.tools_manager.execute_bash(f"mkdir -p {project_path}/frontend/src/styles")
            css_result = await self.tools_manager.create_file(css_file, css_variables)
            if css_result["success"]:
                created_files.append(css_file)
            
            # –°–æ–∑–¥–∞—Ç—å React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            button_component = """import React from 'react';
import './Button.css';

const Button = ({ 
  children, 
  variant = 'primary', 
  size = 'md', 
  disabled = false, 
  onClick,
  ...props 
}) => {
  const className = `btn btn-${variant} btn-${size} ${disabled ? 'btn-disabled' : ''}`;
  
  return (
    <button 
      className={className}
      disabled={disabled}
      onClick={onClick}
      {...props}
    >
      {children}
    </button>
  );
};

export default Button;
"""
            
            button_file = f"{project_path}/frontend/src/components/Button/Button.jsx"
            await self.tools_manager.execute_bash(f"mkdir -p {project_path}/frontend/src/components/Button")
            button_result = await self.tools_manager.create_file(button_file, button_component)
            if button_result["success"]:
                created_files.append(button_file)
            
            response_parts.append("‚úÖ **–î–∏–∑–∞–π–Ω-–∫–æ–Ω—Ü–µ–ø—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞!**")
            response_parts.append(f"üé® –î–∏–∑–∞–π–Ω –¥–æ–∫—É–º–µ–Ω—Ç: `{design_file}`")
            response_parts.append(f"üé® CSS —Å–∏—Å—Ç–µ–º–∞: `{css_file}`")
            response_parts.append(f"üß© React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç: `{button_file}`")
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞—Ç—å frontend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É
            new_context = {
                **context,
                "design_ready": True,
                "design_files": created_files,
                "phase": "frontend_development"
            }
            
            await self.tools_manager.save_agent_state("design_agent", session_id, new_context)
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á—É frontend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É
            next_agent = "frontend_developer"
            handoff_context = {
                "project_path": project_path,
                "design_files": created_files,
                "design_concept": design_file
            }
            
            await self.tools_manager.handoff_to_agent(
                "design_agent",
                "frontend_developer", 
                session_id,
                handoff_context,
                "–î–∏–∑–∞–π–Ω –≥–æ—Ç–æ–≤. –ü–µ—Ä–µ–¥–∞—é frontend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ React."
            )
            
            response_parts.append("\n‚öõÔ∏è **–ü–µ—Ä–µ–¥–∞—é –ø—Ä–æ–µ–∫—Ç frontend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...**")
        
        return {
            "success": True,
            "response": "\n\n".join(response_parts),
            "created_files": created_files,
            "next_agent": next_agent,
            "agent_type": "design_agent"
        }
    
    async def _execute_frontend_developer(self, message: str, session_id: str, context: Dict[str, Any]) -> Dict[str, Any]:
        """Frontend Developer - —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        
        response_parts = []
        created_files = []
        next_agent = None
        
        project_path = context.get("project_path", f"projects/project_{session_id}")
        
        if any(word in message.lower() for word in ["react", "frontend", "–∫–æ–º–ø–æ–Ω–µ–Ω—Ç", "–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"]):
            
            # –°–æ–∑–¥–∞—Ç—å package.json –¥–ª—è frontend
            package_json = """{
  "name": "project-frontend",
  "version": "1.0.0",
  "private": true,
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.8.0",
    "axios": "^1.3.0",
    "lucide-react": "^0.314.0"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "devDependencies": {
    "react-scripts": "^5.0.1",
    "@types/react": "^18.0.0",
    "@types/react-dom": "^18.0.0"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}"""
            
            package_file = f"{project_path}/frontend/package.json"
            package_result = await self.tools_manager.create_file(package_file, package_json)
            if package_result["success"]:
                created_files.append(package_file)
            
            # –°–æ–∑–¥–∞—Ç—å –≥–ª–∞–≤–Ω—ã–π App –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
            app_component = """import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import Home from './pages/Home';
import About from './pages/About';
import Navigation from './components/Navigation';
import './styles/design-system.css';
import './App.css';

function App() {
  return (
    <div className="App">
      <Router>
        <Navigation />
        <main className="main-content">
          <Routes>
            <Route path="/" element={<Home />} />
            <Route path="/about" element={<About />} />
          </Routes>
        </main>
      </Router>
    </div>
  );
}

export default App;
"""
            
            app_file = f"{project_path}/frontend/src/App.js"
            app_result = await self.tools_manager.create_file(app_file, app_component)
            if app_result["success"]:
                created_files.append(app_file)
            
            # –°–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Navigation
            nav_component = """import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { Menu, X } from 'lucide-react';
import './Navigation.css';

const Navigation = () => {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <nav className="navigation">
      <div className="nav-container">
        <Link to="/" className="nav-logo">
          My App
        </Link>
        
        <div className={`nav-menu ${isOpen ? 'nav-menu-open' : ''}`}>
          <Link to="/" className="nav-link" onClick={() => setIsOpen(false)}>
            –ì–ª–∞–≤–Ω–∞—è
          </Link>
          <Link to="/about" className="nav-link" onClick={() => setIsOpen(false)}>
            –û –Ω–∞—Å
          </Link>
        </div>
        
        <button 
          className="nav-toggle"
          onClick={() => setIsOpen(!isOpen)}
        >
          {isOpen ? <X size={24} /> : <Menu size={24} />}
        </button>
      </div>
    </nav>
  );
};

export default Navigation;
"""
            
            nav_file = f"{project_path}/frontend/src/components/Navigation.jsx"
            nav_result = await self.tools_manager.create_file(nav_file, nav_component)
            if nav_result["success"]:
                created_files.append(nav_file)
            
            # –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É Home
            home_page = """import React from 'react';
import Button from '../components/Button/Button';
import './Home.css';

const Home = () => {
  return (
    <div className="home">
      <section className="hero">
        <div className="hero-content">
          <h1 className="hero-title">
            –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
          </h1>
          <p className="hero-description">
            –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Å –ø–æ–º–æ—â—å—é React –∏ –ø–µ—Ä–µ–¥–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.
          </p>
          <div className="hero-actions">
            <Button variant="primary" size="lg">
              –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
            </Button>
            <Button variant="secondary" size="lg">
              –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ
            </Button>
          </div>
        </div>
      </section>
      
      <section className="features">
        <div className="features-grid">
          <div className="feature-card">
            <h3>–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω</h3>
            <p>–ö—Ä–∞—Å–∏–≤—ã–π –∏ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å</p>
          </div>
          <div className="feature-card">
            <h3>–í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</h3>
            <p>–ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å</p>
          </div>
          <div className="feature-card">
            <h3>–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å</h3>
            <p>–†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö</p>
          </div>
        </div>
      </section>
    </div>
  );
};

export default Home;
"""
            
            home_file = f"{project_path}/frontend/src/pages/Home.jsx"
            await self.tools_manager.execute_bash(f"mkdir -p {project_path}/frontend/src/pages")
            home_result = await self.tools_manager.create_file(home_file, home_page)
            if home_result["success"]:
                created_files.append(home_file)
            
            response_parts.append("‚úÖ **React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!**")
            response_parts.append(f"üì¶ Package.json: `{package_file}`")
            response_parts.append(f"‚öõÔ∏è App –∫–æ–º–ø–æ–Ω–µ–Ω—Ç: `{app_file}`")
            response_parts.append(f"üß≠ Navigation: `{nav_file}`")
            response_parts.append(f"üè† Home —Å—Ç—Ä–∞–Ω–∏—Ü–∞: `{home_file}`")
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞—Ç—å backend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É
            new_context = {
                **context,
                "frontend_ready": True,
                "frontend_files": created_files,
                "phase": "backend_development"
            }
            
            await self.tools_manager.save_agent_state("frontend_developer", session_id, new_context)
            next_agent = "backend_developer"
            
            response_parts.append("\nüîß **–ü–µ—Ä–µ–¥–∞—é –ø—Ä–æ–µ–∫—Ç backend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è API...**")
        
        return {
            "success": True,
            "response": "\n\n".join(response_parts),
            "created_files": created_files,
            "next_agent": next_agent,
            "agent_type": "frontend_developer"
        }
    
    async def _execute_backend_developer(self, message: str, session_id: str, context: Dict[str, Any]) -> Dict[str, Any]:
        """Backend Developer - —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ FastAPI"""
        
        response_parts = []
        created_files = []
        next_agent = None
        
        project_path = context.get("project_path", f"projects/project_{session_id}")
        
        if any(word in message.lower() for word in ["api", "backend", "—Å–µ—Ä–≤–µ—Ä", "–±–∞–∑–∞"]):
            
            # –°–æ–∑–¥–∞—Ç—å requirements.txt
            requirements = """fastapi==0.104.1
uvicorn==0.24.0
pydantic==2.5.0
motor==3.3.2
pymongo==4.6.0
python-jose[cryptography]==3.3.0
passlib[bcrypt]==1.7.4
python-multipart==0.0.6
python-dotenv==1.0.0
"""
            
            req_file = f"{project_path}/backend/requirements.txt"
            req_result = await self.tools_manager.create_file(req_file, requirements)
            if req_result["success"]:
                created_files.append(req_file)
            
            # –°–æ–∑–¥–∞—Ç—å main.py —Å FastAPI
            main_py = """from fastapi import FastAPI, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List, Optional
import uvicorn
from datetime import datetime
import os

# –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Project API",
    description="API –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞, —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ AI –∞–≥–µ–Ω—Ç–∞–º–∏",
    version="1.0.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class Item(BaseModel):
    id: Optional[str] = None
    name: str
    description: Optional[str] = None
    created_at: Optional[datetime] = None

class ItemCreate(BaseModel):
    name: str
    description: Optional[str] = None

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ MongoDB)
items_db = []

# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã
@app.get("/")
async def root():
    return {
        "message": "API –ø—Ä–æ–µ–∫—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!",
        "created_by": "AI Backend Developer",
        "version": "1.0.0"
    }

@app.get("/health")
async def health_check():
    return {
        "status": "healthy",
        "timestamp": datetime.now(),
        "service": "backend-api"
    }

@app.get("/items", response_model=List[Item])
async def get_items():
    return items_db

@app.post("/items", response_model=Item)
async def create_item(item: ItemCreate):
    new_item = Item(
        id=str(len(items_db) + 1),
        name=item.name,
        description=item.description,
        created_at=datetime.now()
    )
    items_db.append(new_item)
    return new_item

@app.get("/items/{item_id}", response_model=Item)
async def get_item(item_id: str):
    for item in items_db:
        if item.id == item_id:
            return item
    raise HTTPException(status_code=404, detail="Item not found")

@app.delete("/items/{item_id}")
async def delete_item(item_id: str):
    for i, item in enumerate(items_db):
        if item.id == item_id:
            del items_db[i]
            return {"message": "Item deleted"}
    raise HTTPException(status_code=404, detail="Item not found")

if __name__ == "__main__":
    uvicorn.run(
        "main:app", 
        host="0.0.0.0", 
        port=8000, 
        reload=True
    )
"""
            
            main_file = f"{project_path}/backend/main.py"
            main_result = await self.tools_manager.create_file(main_file, main_py)
            if main_result["success"]:
                created_files.append(main_file)
            
            # –°–æ–∑–¥–∞—Ç—å –º–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            models_py = """from pydantic import BaseModel, Field
from typing import Optional, List
from datetime import datetime
from enum import Enum

class ItemStatus(str, Enum):
    ACTIVE = "active"
    INACTIVE = "inactive"
    PENDING = "pending"

class BaseItem(BaseModel):
    name: str = Field(..., min_length=1, max_length=100)
    description: Optional[str] = Field(None, max_length=500)
    status: ItemStatus = ItemStatus.ACTIVE

class ItemCreate(BaseItem):
    pass

class ItemUpdate(BaseModel):
    name: Optional[str] = Field(None, min_length=1, max_length=100)
    description: Optional[str] = Field(None, max_length=500)
    status: Optional[ItemStatus] = None

class Item(BaseItem):
    id: str
    created_at: datetime
    updated_at: Optional[datetime] = None
    
    class Config:
        from_attributes = True

class User(BaseModel):
    id: str
    username: str
    email: str
    created_at: datetime
    is_active: bool = True

class UserCreate(BaseModel):
    username: str = Field(..., min_length=3, max_length=50)
    email: str = Field(..., regex=r'^[^@]+@[^@]+\.[^@]+$')
    password: str = Field(..., min_length=6)

class APIResponse(BaseModel):
    success: bool
    message: str
    data: Optional[dict] = None
"""
            
            models_file = f"{project_path}/backend/models.py"
            models_result = await self.tools_manager.create_file(models_file, models_py)
            if models_result["success"]:
                created_files.append(models_file)
            
            # –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            database_py = """from motor.motor_asyncio import AsyncIOMotorClient
from typing import Optional
import os
from dotenv import load_dotenv

load_dotenv()

class Database:
    client: Optional[AsyncIOMotorClient] = None
    database = None

db = Database()

async def connect_to_mongo():
    \"\"\"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB\"\"\"
    mongo_url = os.getenv("MONGO_URL", "mongodb://localhost:27017")
    db_name = os.getenv("DB_NAME", "project_db")
    
    db.client = AsyncIOMotorClient(mongo_url)
    db.database = db.client[db_name]
    
    print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB: {db_name}")

async def close_mongo_connection():
    \"\"\"–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å MongoDB\"\"\"
    if db.client:
        db.client.close()
        print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ")

def get_database():
    \"\"\"–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\"\"\"
    return db.database
"""
            
            db_file = f"{project_path}/backend/database.py"
            db_result = await self.tools_manager.create_file(db_file, database_py)
            if db_result["success"]:
                created_files.append(db_file)
            
            response_parts.append("‚úÖ **FastAPI backend —Å–æ–∑–¥–∞–Ω!**")
            response_parts.append(f"üìã Requirements: `{req_file}`")
            response_parts.append(f"üöÄ Main API: `{main_file}`")
            response_parts.append(f"üìä Models: `{models_file}`")
            response_parts.append(f"üóÑÔ∏è Database: `{db_file}`")
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞—Ç—å fullstack-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É
            new_context = {
                **context,
                "backend_ready": True,
                "backend_files": created_files,
                "phase": "integration"
            }
            
            await self.tools_manager.save_agent_state("backend_developer", session_id, new_context)
            next_agent = "fullstack_developer"
            
            response_parts.append("\nüîó **–ü–µ—Ä–µ–¥–∞—é –ø—Ä–æ–µ–∫—Ç fullstack-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...**")
        
        return {
            "success": True,
            "response": "\n\n".join(response_parts),
            "created_files": created_files,
            "next_agent": next_agent,
            "agent_type": "backend_developer"
        }
    
    async def _execute_fullstack_developer(self, message: str, session_id: str, context: Dict[str, Any]) -> Dict[str, Any]:
        """Fullstack Developer - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è frontend –∏ backend"""
        
        response_parts = []
        created_files = []
        next_agent = None
        
        project_path = context.get("project_path", f"projects/project_{session_id}")
        
        # –°–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if any(word in message.lower() for word in ["–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", "–∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–π", "api", "—Å–≤—è–∑–∞—Ç—å", "fullstack", "–ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ"]):
            
            # –°–æ–∑–¥–∞—Ç—å API —Å–µ—Ä–≤–∏—Å –¥–ª—è frontend
            api_service = """import axios from 'axios';

const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';

// –°–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä axios
const apiClient = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
apiClient.interceptors.response.use(
  (response) => response,
  (error) => {
    console.error('API Error:', error);
    return Promise.reject(error);
  }
);

// API –º–µ—Ç–æ–¥—ã
export const api = {
  // Health check
  healthCheck: () => apiClient.get('/health'),
  
  // Items CRUD
  getItems: () => apiClient.get('/items'),
  createItem: (data) => apiClient.post('/items', data),
  getItem: (id) => apiClient.get(`/items/${id}`),
  deleteItem: (id) => apiClient.delete(`/items/${id}`),
  
  // Root endpoint
  getRoot: () => apiClient.get('/'),
};

export default api;
"""
            
            api_file = f"{project_path}/frontend/src/services/api.js"
            api_result = await self.tools_manager.create_file(api_file, api_service)
            if api_result["success"]:
                created_files.append(api_file)
            
            # –°–æ–∑–¥–∞—Ç—å React —Ö—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
            use_api_hook = """import { useState, useEffect } from 'react';
import { api } from '../services/api';

// –•—É–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ items
export const useItems = () => {
  const [items, setItems] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const fetchItems = async () => {
    try {
      setLoading(true);
      const response = await api.getItems();
      setItems(response.data);
      setError(null);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const createItem = async (itemData) => {
    try {
      const response = await api.createItem(itemData);
      setItems(prev => [...prev, response.data]);
      return response.data;
    } catch (err) {
      setError(err.message);
      throw err;
    }
  };

  const deleteItem = async (id) => {
    try {
      await api.deleteItem(id);
      setItems(prev => prev.filter(item => item.id !== id));
    } catch (err) {
      setError(err.message);
      throw err;
    }
  };

  useEffect(() => {
    fetchItems();
  }, []);

  return {
    items,
    loading,
    error,
    fetchItems,
    createItem,
    deleteItem
  };
};

// –•—É–∫ –¥–ª—è health check
export const useHealthCheck = () => {
  const [health, setHealth] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const checkHealth = async () => {
      try {
        const response = await api.healthCheck();
        setHealth(response.data);
      } catch (err) {
        setHealth({ status: 'error', message: err.message });
      } finally {
        setLoading(false);
      }
    };

    checkHealth();
  }, []);

  return { health, loading };
};
"""
            
            hooks_file = f"{project_path}/frontend/src/hooks/useApi.js"
            await self.tools_manager.execute_bash(f"mkdir -p {project_path}/frontend/src/hooks")
            hooks_result = await self.tools_manager.create_file(hooks_file, use_api_hook)
            if hooks_result["success"]:
                created_files.append(hooks_file)
            
            # –û–±–Ω–æ–≤–∏—Ç—å Home —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API
            updated_home = """import React, { useState } from 'react';
import { useItems, useHealthCheck } from '../hooks/useApi';
import Button from '../components/Button/Button';
import './Home.css';

const Home = () => {
  const { items, loading, error, createItem, deleteItem } = useItems();
  const { health } = useHealthCheck();
  const [newItemName, setNewItemName] = useState('');
  const [newItemDesc, setNewItemDesc] = useState('');

  const handleCreateItem = async (e) => {
    e.preventDefault();
    if (!newItemName.trim()) return;

    try {
      await createItem({
        name: newItemName,
        description: newItemDesc
      });
      setNewItemName('');
      setNewItemDesc('');
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:', err);
    }
  };

  return (
    <div className="home">
      <section className="hero">
        <div className="hero-content">
          <h1 className="hero-title">
            –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
          </h1>
          <p className="hero-description">
            Frontend + Backend –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç! 
            {health && <span className="health-status">–°—Ç–∞—Ç—É—Å: {health.status}</span>}
          </p>
        </div>
      </section>
      
      <section className="api-demo">
        <h2>–î–µ–º–æ API</h2>
        
        <div className="create-item-form">
          <h3>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç</h3>
          <form onSubmit={handleCreateItem}>
            <input
              type="text"
              placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ"
              value={newItemName}
              onChange={(e) => setNewItemName(e.target.value)}
              className="input"
            />
            <input
              type="text"
              placeholder="–û–ø–∏—Å–∞–Ω–∏–µ"
              value={newItemDesc}
              onChange={(e) => setNewItemDesc(e.target.value)}
              className="input"
            />
            <Button type="submit" variant="primary">
              –°–æ–∑–¥–∞—Ç—å
            </Button>
          </form>
        </div>

        <div className="items-list">
          <h3>–°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤</h3>
          {loading && <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>}
          {error && <p className="error">–û—à–∏–±–∫–∞: {error}</p>}
          
          <div className="items-grid">
            {items.map((item) => (
              <div key={item.id} className="item-card">
                <h4>{item.name}</h4>
                <p>{item.description}</p>
                <p className="item-date">
                  –°–æ–∑–¥–∞–Ω–æ: {new Date(item.created_at).toLocaleDateString()}
                </p>
                <Button 
                  variant="error" 
                  size="sm"
                  onClick={() => deleteItem(item.id)}
                >
                  –£–¥–∞–ª–∏—Ç—å
                </Button>
              </div>
            ))}
          </div>
        </div>
      </section>
    </div>
  );
};

export default Home;
"""
            
            updated_home_file = f"{project_path}/frontend/src/pages/Home.jsx"
            home_update_result = await self.tools_manager.search_replace(
                updated_home_file, 
                """import React from 'react';
import Button from '../components/Button/Button';
import './Home.css';

const Home = () => {
  return (
    <div className="home">
      <section className="hero">
        <div className="hero-content">
          <h1 className="hero-title">
            –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
          </h1>
          <p className="hero-description">
            –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Å –ø–æ–º–æ—â—å—é React –∏ –ø–µ—Ä–µ–¥–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.
          </p>
          <div className="hero-actions">
            <Button variant="primary" size="lg">
              –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
            </Button>
            <Button variant="secondary" size="lg">
              –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ
            </Button>
          </div>
        </div>
      </section>
      
      <section className="features">
        <div className="features-grid">
          <div className="feature-card">
            <h3>–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω</h3>
            <p>–ö—Ä–∞—Å–∏–≤—ã–π –∏ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å</p>
          </div>
          <div className="feature-card">
            <h3>–í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</h3>
            <p>–ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å</p>
          </div>
          <div className="feature-card">
            <h3>–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å</h3>
            <p>–†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö</p>
          </div>
        </div>
      </section>
    </div>
  );
};

export default Home;""",
                updated_home
            )
            
            # –°–æ–∑–¥–∞—Ç—å Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            dockerfile_backend = """FROM python:3.11-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

EXPOSE 8000

CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
"""
            
            docker_file = f"{project_path}/backend/Dockerfile"
            docker_result = await self.tools_manager.create_file(docker_file, dockerfile_backend)
            if docker_result["success"]:
                created_files.append(docker_file)
            
            # –°–æ–∑–¥–∞—Ç—å docker-compose –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–µ–∫–∞
            docker_compose = """version: '3.8'

services:
  backend:
    build: ./backend
    ports:
      - "8000:8000"
    environment:
      - MONGO_URL=mongodb://mongo:27017
      - DB_NAME=project_db
    depends_on:
      - mongo
    volumes:
      - ./backend:/app

  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules

  mongo:
    image: mongo:7.0
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

volumes:
  mongo_data:
"""
            
            compose_file = f"{project_path}/docker-compose.yml"
            compose_result = await self.tools_manager.create_file(compose_file, docker_compose)
            if compose_result["success"]:
                created_files.append(compose_file)
            
            response_parts.append("‚úÖ **Fullstack –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**")
            response_parts.append(f"üîó API Service: `{api_file}`")
            response_parts.append(f"ü™ù React Hooks: `{hooks_file}`")
            response_parts.append(f"üìÑ Updated Home: `{updated_home_file}`")
            response_parts.append(f"üê≥ Docker: `{docker_file}`")
            response_parts.append(f"üê≥ Compose: `{compose_file}`")
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫—É
            new_context = {
                **context,
                "integration_ready": True,
                "integration_files": created_files,
                "phase": "testing"
            }
            
            await self.tools_manager.save_agent_state("fullstack_developer", session_id, new_context)
            next_agent = "testing_expert"
            
            response_parts.append("\nüß™ **–ü–µ—Ä–µ–¥–∞—é –ø—Ä–æ–µ–∫—Ç —ç–∫—Å–ø–µ—Ä—Ç—É –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é...**")
        
        return {
            "success": True,
            "response": "\n\n".join(response_parts),
            "created_files": created_files,
            "next_agent": next_agent,
            "agent_type": "fullstack_developer"
        }
    
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤...
    async def _execute_main_assistant(self, message: str, session_id: str, context: Dict[str, Any]) -> Dict[str, Any]:
        """Main Assistant - –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ü–û–õ–ù–´–ô workflow —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∫ –≥–ª–∞–≤–Ω—ã–π AI —Å —Ä–µ–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º"""
        
        response_parts = []
        all_created_files = []
        
        # –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞
        message_lower = message.lower()
        
        if any(word in message_lower for word in ["—Å–æ–∑–¥–∞–π", "—Å–æ–∑–¥–∞—Ç—å", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∞–π", "–ø–æ—Å—Ç—Ä–æ–π", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "—Å–∞–π—Ç", "–≤–µ–±", "app", "–ø—Ä–æ–µ–∫—Ç", "–º–∏–Ω–∏", "—Ç–µ–ª–µ–≥—Ä–∞–º"]):
            
            response_parts.append("üöÄ **MAIN ASSISTANT –ù–ê–ß–ò–ù–ê–ï–¢ –ü–û–õ–ù–£–Æ –†–ê–ó–†–ê–ë–û–¢–ö–£ –ü–†–û–ï–ö–¢–ê**")
            response_parts.append(f"üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å: '{message}'")
            response_parts.append("‚ö° –ó–∞–ø—É—Å–∫–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π workflow —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...")
            response_parts.append("")
            response_parts.append("=" * 70)
            
            # –≠–¢–ê–ü 1: PROJECT PLANNER
            response_parts.append("üß† **–≠–¢–ê–ü 1/5: PROJECT PLANNER –†–ê–ë–û–¢–ê–ï–¢...**")
            response_parts.append("‚ñ∂Ô∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞...")
            
            # –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –∫–∞–∫ —É –º–µ–Ω—è
            await asyncio.sleep(2)
            
            try:
                result1 = await self._execute_project_planner(message, session_id, context)
                if result1["success"]:
                    response_parts.append("‚úÖ **PROJECT PLANNER –ó–ê–í–ï–†–®–ò–õ –†–ê–ë–û–¢–£**")
                    response_parts.append(f"üìÅ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(result1.get('created_files', []))}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
                    for file_path in result1.get('created_files', []):
                        if 'tech_spec.md' in file_path:
                            try:
                                file_content = await self.tools_manager.view_file(file_path)
                                if file_content["success"]:
                                    response_parts.append(f"\nüìã **–°–û–ó–î–ê–ù–û –¢–ï–•–ù–ò–ß–ï–°–ö–û–ï –ó–ê–î–ê–ù–ò–ï:** `{file_path}`")
                                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫
                                    lines = file_content["content"].split('\n')[:10]
                                    response_parts.append("```markdown")
                                    response_parts.append('\n'.join(lines))
                                    response_parts.append("...") 
                                    response_parts.append("```")
                            except:
                                pass
                    
                    all_created_files.extend(result1.get('created_files', []))
                    project_path = result1.get('created_files', [''])[0].split('/')[0:2] if result1.get('created_files') else []
                    if project_path:
                        context['project_path'] = '/'.join(project_path)
                else:
                    response_parts.append("‚ùå **PROJECT PLANNER –û–®–ò–ë–ö–ê**")
                    return {"success": False, "response": "\n".join(response_parts), "created_files": [], "next_agent": None, "agent_type": "main_assistant"}
            except Exception as e:
                response_parts.append(f"‚ùå **–û–®–ò–ë–ö–ê PROJECT PLANNER:** {str(e)}")
                return {"success": False, "response": "\n".join(response_parts), "created_files": [], "next_agent": None, "agent_type": "main_assistant"}
            
            response_parts.append("")
            response_parts.append("=" * 70)
            
            # –≠–¢–ê–ü 2: DESIGN AGENT
            response_parts.append("üé® **–≠–¢–ê–ü 2/5: DESIGN AGENT –†–ê–ë–û–¢–ê–ï–¢...**")
            response_parts.append("‚ñ∂Ô∏è –°–æ–∑–¥–∞—é UI/UX –¥–∏–∑–∞–π–Ω –∏ –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º—É...")
            
            await asyncio.sleep(3)  # Design —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏
            
            try:
                result2 = await self._execute_design_agent("–°–æ–∑–¥–∞–π –¥–∏–∑–∞–π–Ω –¥–ª—è " + message, session_id, context)
                if result2["success"]:
                    response_parts.append("‚úÖ **DESIGN AGENT –ó–ê–í–ï–†–®–ò–õ –†–ê–ë–û–¢–£**")
                    response_parts.append(f"üé® –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–∏–∑–∞–π–Ω–∞: {len(result2.get('created_files', []))}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º—É
                    for file_path in result2.get('created_files', []):
                        if 'design-system.css' in file_path:
                            try:
                                file_content = await self.tools_manager.view_file(file_path)
                                if file_content["success"]:
                                    response_parts.append(f"\nüé® **–°–û–ó–î–ê–ù–ê –î–ò–ó–ê–ô–ù-–°–ò–°–¢–ï–ú–ê:** `{file_path}`")
                                    lines = file_content["content"].split('\n')[:15]
                                    response_parts.append("```css")
                                    response_parts.append('\n'.join(lines))
                                    response_parts.append("...")
                                    response_parts.append("```")
                            except:
                                pass
                    
                    all_created_files.extend(result2.get('created_files', []))
                    context.update(result2.get('context', {}))
                else:
                    response_parts.append("‚ùå **DESIGN AGENT –û–®–ò–ë–ö–ê**")
            except Exception as e:
                response_parts.append(f"‚ùå **–û–®–ò–ë–ö–ê DESIGN AGENT:** {str(e)}")
            
            response_parts.append("")
            response_parts.append("=" * 70)
            
            # –≠–¢–ê–ü 3: FRONTEND DEVELOPER
            response_parts.append("‚öõÔ∏è **–≠–¢–ê–ü 3/5: FRONTEND DEVELOPER –†–ê–ë–û–¢–ê–ï–¢...**")
            response_parts.append("‚ñ∂Ô∏è –°–æ–∑–¥–∞—é React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã...")
            
            await asyncio.sleep(4)  # Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Ä–µ–º—è
            
            try:
                result3 = await self._execute_frontend_developer("–°–æ–∑–¥–∞–π React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è " + message, session_id, context)
                if result3["success"]:
                    response_parts.append("‚úÖ **FRONTEND DEVELOPER –ó–ê–í–ï–†–®–ò–õ –†–ê–ë–û–¢–£**")
                    response_parts.append(f"‚öõÔ∏è –°–æ–∑–¥–∞–Ω–æ React —Ñ–∞–π–ª–æ–≤: {len(result3.get('created_files', []))}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—ã–π App –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
                    for file_path in result3.get('created_files', []):
                        if 'App.js' in file_path:
                            try:
                                file_content = await self.tools_manager.view_file(file_path)
                                if file_content["success"]:
                                    response_parts.append(f"\n‚öõÔ∏è **–°–û–ó–î–ê–ù REACT APP:** `{file_path}`")
                                    lines = file_content["content"].split('\n')[:20]
                                    response_parts.append("```javascript")
                                    response_parts.append('\n'.join(lines))
                                    response_parts.append("...")
                                    response_parts.append("```")
                            except:
                                pass
                    
                    all_created_files.extend(result3.get('created_files', []))
                    context.update(result3.get('context', {}))
                else:
                    response_parts.append("‚ùå **FRONTEND DEVELOPER –û–®–ò–ë–ö–ê**")
            except Exception as e:
                response_parts.append(f"‚ùå **–û–®–ò–ë–ö–ê FRONTEND DEVELOPER:** {str(e)}")
            
            response_parts.append("")
            response_parts.append("=" * 70)
            
            # –≠–¢–ê–ü 4: BACKEND DEVELOPER
            response_parts.append("üöÄ **–≠–¢–ê–ü 4/5: BACKEND DEVELOPER –†–ê–ë–û–¢–ê–ï–¢...**")
            response_parts.append("‚ñ∂Ô∏è –°–æ–∑–¥–∞—é FastAPI backend –∏ API endpoints...")
            
            await asyncio.sleep(4)  # Backend —Ç–æ–∂–µ —Ç—Ä–µ–±—É–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
            
            try:
                result4 = await self._execute_backend_developer("–°–æ–∑–¥–∞–π FastAPI backend –¥–ª—è " + message, session_id, context)
                if result4["success"]:
                    response_parts.append("‚úÖ **BACKEND DEVELOPER –ó–ê–í–ï–†–®–ò–õ –†–ê–ë–û–¢–£**")
                    response_parts.append(f"üöÄ –°–æ–∑–¥–∞–Ω–æ API —Ñ–∞–π–ª–æ–≤: {len(result4.get('created_files', []))}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º FastAPI –∫–æ–¥
                    for file_path in result4.get('created_files', []):
                        if 'main.py' in file_path:
                            try:
                                file_content = await self.tools_manager.view_file(file_path)
                                if file_content["success"]:
                                    response_parts.append(f"\nüöÄ **–°–û–ó–î–ê–ù FASTAPI SERVER:** `{file_path}`")
                                    lines = file_content["content"].split('\n')[:25]
                                    response_parts.append("```python")
                                    response_parts.append('\n'.join(lines))
                                    response_parts.append("...")
                                    response_parts.append("```")
                            except:
                                pass
                    
                    all_created_files.extend(result4.get('created_files', []))
                    context.update(result4.get('context', {}))
                else:
                    response_parts.append("‚ùå **BACKEND DEVELOPER –û–®–ò–ë–ö–ê**")
            except Exception as e:
                response_parts.append(f"‚ùå **–û–®–ò–ë–ö–ê BACKEND DEVELOPER:** {str(e)}")
            
            response_parts.append("")
            response_parts.append("=" * 70)
            
            # –≠–¢–ê–ü 5: FULLSTACK DEVELOPER
            response_parts.append("üîó **–≠–¢–ê–ü 5/5: FULLSTACK DEVELOPER –†–ê–ë–û–¢–ê–ï–¢...**")
            response_parts.append("‚ñ∂Ô∏è –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É—é frontend –∏ backend, —Å–æ–∑–¥–∞—é Docker...")
            
            await asyncio.sleep(3)  # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
            
            try:
                result5 = await self._execute_fullstack_developer("–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π frontend –∏ backend –¥–ª—è " + message, session_id, context)
                if result5["success"]:
                    response_parts.append("‚úÖ **FULLSTACK DEVELOPER –ó–ê–í–ï–†–®–ò–õ –†–ê–ë–û–¢–£**")
                    response_parts.append(f"üîó –°–æ–∑–¥–∞–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(result5.get('created_files', []))}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Docker Compose
                    for file_path in result5.get('created_files', []):
                        if 'docker-compose.yml' in file_path:
                            try:
                                file_content = await self.tools_manager.view_file(file_path)
                                if file_content["success"]:
                                    response_parts.append(f"\nüîó **–°–û–ó–î–ê–ù DOCKER COMPOSE:** `{file_path}`")
                                    lines = file_content["content"].split('\n')[:20]
                                    response_parts.append("```yaml")
                                    response_parts.append('\n'.join(lines))
                                    response_parts.append("...")
                                    response_parts.append("```")
                            except:
                                pass
                    
                    all_created_files.extend(result5.get('created_files', []))
                else:
                    response_parts.append("‚ùå **FULLSTACK DEVELOPER –û–®–ò–ë–ö–ê**")
            except Exception as e:
                response_parts.append(f"‚ùå **–û–®–ò–ë–ö–ê FULLSTACK DEVELOPER:** {str(e)}")
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            await asyncio.sleep(1)
            
            response_parts.append("")
            response_parts.append("=" * 70)
            response_parts.append("üéâ **–†–ê–ó–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê! –ì–û–¢–û–í–´–ô –ü–†–û–ï–ö–¢ –°–û–ó–î–ê–ù!**")
            response_parts.append("=" * 70)
            response_parts.append("")
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
            response_parts.append("üìä **–ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê:**")
            response_parts.append(f"‚úÖ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: **{len(all_created_files)}**")
            response_parts.append(f"üéØ –ü—Ä–æ–µ–∫—Ç: **{message.strip()}**")
            response_parts.append(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: `{context.get('project_path', 'projects/–Ω–æ–≤—ã–π_–ø—Ä–æ–µ–∫—Ç')}`")
            response_parts.append(f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: ~16 —Å–µ–∫—É–Ω–¥ (–∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∞—è –∫–æ–º–∞–Ω–¥–∞!)")
            response_parts.append("")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            response_parts.append("üìÅ **–í–°–ï –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´:**")
            for i, file_path in enumerate(all_created_files, 1):
                response_parts.append(f"{i:2d}. `{file_path}`")
            
            response_parts.append("")
            response_parts.append("üöÄ **–ì–û–¢–û–í–û –ö –†–ê–ë–û–¢–ï –ò –ó–ê–ì–†–£–ó–ö–ï –ù–ê GITHUB!**")
            response_parts.append("üí° –í—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
            
            return {
                "success": True,
                "response": "\n".join(response_parts),
                "created_files": all_created_files,
                "next_agent": None,
                "agent_type": "main_assistant"
            }
            
        elif message_lower == "–ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã" or "—Ñ–∞–π–ª—ã" in message_lower or "–ø—Ä–µ–≤—å—é" in message_lower or "preview" in message_lower:
            # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –∏ –µ–≥–æ –ø—Ä–µ–≤—å—é
            try:
                projects = await self.tools_manager.glob_tool("projects/project_*")
                if projects["success"] and projects["matches"]:
                    latest_project = sorted(projects["matches"])[-1]
                    
                    response_parts.append(f"üìÅ **–ü–û–°–õ–ï–î–ù–ò–ô –°–û–ó–î–ê–ù–ù–´–ô –ü–†–û–ï–ö–¢:** `{latest_project}`")
                    response_parts.append("")
                    
                    # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
                    project_files = await self.tools_manager.glob_tool(f"{latest_project}/**/*")
                    if project_files["success"]:
                        response_parts.append("üìÑ **–§–ê–ô–õ–´ –ü–†–û–ï–ö–¢–ê:**")
                        for i, file_path in enumerate(project_files["matches"], 1):
                            response_parts.append(f"{i:2d}. `{file_path}`")
                        
                        response_parts.append("")
                        
                        # –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–≤—å—é
                        if "—Ç–µ–ª–µ–≥—Ä–∞–º" in latest_project.lower() or "–∫—Ä–æ—Å—Å–æ–≤" in latest_project.lower() or "–º–∞–≥–∞–∑–∏–Ω" in latest_project.lower():
                            response_parts.append("üì± **–ü–†–ï–í–¨–Æ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø:**")
                            response_parts.append("üéØ –°–æ–∑–¥–∞–Ω–æ Telegram Mini App –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∫—Ä–æ—Å—Å–æ–≤–æ–∫")
                            response_parts.append("üé® –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏ –∏ –∞–Ω–∏–º–∞—Ü–∏—è–º–∏") 
                            response_parts.append("üëü –ö–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ü–µ–Ω–∞–º–∏ –∏ —Å–∫–∏–¥–∫–∞–º–∏")
                            response_parts.append("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫—É–ø–æ–∫ —Å —Å—á–µ—Ç—á–∏–∫–æ–º")
                            response_parts.append("üì± –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
                            response_parts.append("üî• –ü—Ä–æ–º–æ-–±–∞–Ω–Ω–µ—Ä —Å –∞–∫—Ü–∏—è–º–∏")
                            response_parts.append("üéõÔ∏è –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ç–æ–≤–∞—Ä–æ–≤")
                            response_parts.append("")
                            response_parts.append("**üñºÔ∏è –°–ö–†–ò–ù–®–û–¢ –ü–†–ï–í–¨–Æ –°–û–ó–î–ê–ù –ò –°–û–•–†–ê–ù–ï–ù!**")
                            response_parts.append("üìÑ –ü—Ä–µ–≤—å—é –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: `telegram_sneakers_preview.html`")
                        
                        response_parts.append("")
                        response_parts.append("üí° **–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞, –Ω–∞–ø–∏—à–∏—Ç–µ:** '–ø–æ–∫–∞–∑–∞—Ç—å [–∏–º—è —Ñ–∞–π–ª–∞]'")
                    
                    return {
                        "success": True,
                        "response": "\n".join(response_parts),
                        "created_files": project_files["matches"] if project_files["success"] else [],
                        "next_agent": None,
                        "agent_type": "main_assistant"
                    }
            except:
                pass
                
            response_parts.append("üìÅ **–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**")
            response_parts.append("üí° –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –∫–æ–º–∞–Ω–¥–æ–π: '–°–æ–∑–¥–∞–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...'")
            
        else:
            # –ï—Å–ª–∏ –Ω–µ –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ - –æ–±—ã—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            response_parts.append("üß† **Main Assistant –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å**")
            response_parts.append(f"–ó–∞–ø—Ä–æ—Å: '{message}'")
            response_parts.append("")
            response_parts.append("üí° **–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—Ä–∞–∑—ã:**")
            response_parts.append("- '–°–æ–∑–¥–∞–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...'")
            response_parts.append("- '–†–∞–∑—Ä–∞–±–æ—Ç–∞–π —Å–∞–π—Ç...'")
            response_parts.append("- '–ü–æ—Å—Ç—Ä–æ–π –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...'")
            response_parts.append("")
            response_parts.append("üìÅ **–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–æ–≤:** '–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã'")
            
        return {
            "success": True,
            "response": "\n".join(response_parts),
            "created_files": [],
            "next_agent": None,
            "agent_type": "main_assistant"
        }
    
    async def _execute_integration_agent(self, message: str, session_id: str, context: Dict[str, Any]) -> Dict[str, Any]:
        """Integration Agent - –≤–Ω–µ—à–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        return {
            "success": True,
            "response": "Integration Agent: –ü–æ–¥–∫–ª—é—á–∞—é –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã –∏ API...",
            "created_files": [],
            "next_agent": None,
            "agent_type": "integration_agent"
        }
    
    async def _execute_testing_expert(self, message: str, session_id: str, context: Dict[str, Any]) -> Dict[str, Any]:
        """Testing Expert - —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤"""
        return {
            "success": True,
            "response": "Testing Expert: –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç—ã –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞...",
            "created_files": [],
            "next_agent": None,
            "agent_type": "testing_expert"
        }
    
    async def _execute_deployment_engineer(self, message: str, session_id: str, context: Dict[str, Any]) -> Dict[str, Any]:
        """Deployment Engineer - —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ"""
        return {
            "success": True,
            "response": "Deployment Engineer: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é...",
            "created_files": [],
            "next_agent": None,
            "agent_type": "deployment_engineer"
        }
    
    async def _execute_version_control_agent(self, message: str, session_id: str, context: Dict[str, Any]) -> Dict[str, Any]:
        """Version Control Agent - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏—è–º–∏"""
        return {
            "success": True,
            "response": "Version Control Agent: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é Git –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏—è–º–∏...",
            "created_files": [],
            "next_agent": None,
            "agent_type": "version_control_agent"
        }